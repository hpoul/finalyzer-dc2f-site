/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package app.anlage.site

import app.anlage.site.contentdef.*
import app.anlage.site.templates.*
import com.dc2f.*
import com.dc2f.render.*
import com.dc2f.util.toStringReflective
import com.google.common.io.*
import com.google.common.io.Files
import mu.KotlinLogging
import org.apache.commons.io.FileUtils
import org.apache.commons.lang3.builder.*
import org.apache.commons.text.StringEscapeUtils
import java.io.File
import java.nio.file.*

private val logger = KotlinLogging.logger {}

//interface PageSeo : ContentDef {
//    val title: String
//    val description: String
//}
//
//abstract class FinalyzerWebsite: Website<SimpleContentFolderChild> {
//    @set:JacksonInject("index")
//    abstract var index: LandingPage
//}

class FinalyzerTheme : Theme() {
    override fun configure(config: ThemeConfig) {
        config.pageRenderer<FinalyzerWebsite> {
            renderChildren(node.children)
            copyForNode(node.index).renderToHtml()
        }
        config.pageRenderer<LandingPage> { landingPage() }
        config.pageRenderer<Blog> { renderChildren(node.children); blogIndexPage() }
        config.pageRenderer<Article> { blogArticle() }
        config.pageRenderer<PartialFolder> {  }
        contentTemplates()
//        config.pageRenderer<FinalyzerWebsite>(
//            { ") }
//        )
    }

    override fun renderLinkTitle(content: ContentDef): String? =
        when (content) {
            is WithPageSeo -> content.seo.title
            else -> null
        }
}


fun main(args: Array<String>) {
    logger.info { "Starting ..." }

    val loadedWebsite = ContentLoader(FinalyzerWebsite::class)
        .load(FileSystems.getDefault().getPath("web", "content"))
    logger.info { "loaded website ${loadedWebsite}." }
    logger.info {
        "reflected: ${loadedWebsite.toStringReflective()}"
    }

    val targetPath = FileSystems.getDefault().getPath("public")
    Renderer(
        FinalyzerTheme(),
        targetPath,
        loadedWebsite.context
    ).renderWebsite(loadedWebsite.content, loadedWebsite.metadata)
    // FIXME workaround for now to copy over some assets only referenced by css (fonts)
    FileUtils.copyDirectory(File("web", "static"), targetPath.toFile())

}
