/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package app.anlage.site

import com.dc2f.*
import com.dc2f.example.*
import com.fasterxml.jackson.annotation.JacksonInject
import mu.KotlinLogging
import java.nio.file.FileSystems
import org.apache.commons.lang3.builder.*
import org.apache.commons.text.StringEscapeUtils

private val logger = KotlinLogging.logger {}

//interface PageSeo : ContentDef {
//    val title: String
//    val description: String
//}
//
//abstract class FinalyzerWebsite: Website<SimpleContentFolderChild> {
//    @set:JacksonInject("index")
//    abstract var index: LandingPage
//}



fun main(args: Array<String>) {
    logger.info { "Starting ..." }

    val website = ContentLoader(FinalyzerWebsite::class)
        .load(FileSystems.getDefault().getPath("web", "content"))
    logger.info { "loaded website ${website}."}
    val toStringStyle = object : MultilineRecursiveToStringStyle() {
        init {
            isUseShortClassName = true
            isUseIdentityHashCode = false
        }

        override fun appendDetail(buffer: StringBuffer?, fieldName: String?, value: Any?) {
            if (value is String) {
                buffer?.append(StringEscapeUtils.escapeJson(value))
            } else {
                super.appendDetail(buffer, fieldName, value)
            }
        }
    }
    logger.info { "reflected: ${ReflectionToStringBuilder.toString(website, toStringStyle)}" }

}
