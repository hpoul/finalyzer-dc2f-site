/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package app.anlage.site

import com.dc2f.*
import com.dc2f.render.*
import mu.KotlinLogging
import org.apache.commons.lang3.builder.*
import org.apache.commons.text.StringEscapeUtils
import java.nio.file.*

private val logger = KotlinLogging.logger {}

//interface PageSeo : ContentDef {
//    val title: String
//    val description: String
//}
//
//abstract class FinalyzerWebsite: Website<SimpleContentFolderChild> {
//    @set:JacksonInject("index")
//    abstract var index: LandingPage
//}

class FinalyzerTheme : Theme() {
    override fun configure(config: ThemeConfig) {
        config.pageRenderer<FinalyzerWebsite> {
            copyForNode(node.index).renderToHtml()
        }
        config.pageRenderer<LandingPage> { landingPage() }
//        config.pageRenderer<FinalyzerWebsite>(
//            { ") }
//        )
    }
}


fun main(args: Array<String>) {
    logger.info { "Starting ..." }

    val loadedWebsite = ContentLoader(FinalyzerWebsite::class)
        .load(FileSystems.getDefault().getPath("web", "content"))
    logger.info { "loaded website ${loadedWebsite}." }
    val toStringStyle = object : MultilineRecursiveToStringStyle() {
        init {
            isUseShortClassName = true
            isUseIdentityHashCode = false
        }

        override fun appendDetail(buffer: StringBuffer?, fieldName: String?, value: Any?) {
            if (value is Path) {
                buffer?.append("Path:")?.append(StringEscapeUtils.escapeJson(value.toString()))
            } else if (value is String) {
                buffer?.append(StringEscapeUtils.escapeJson(value))
            } else {
                super.appendDetail(buffer, fieldName, value)
            }
        }

        override fun accept(clazz: Class<*>?): Boolean {
            return !setOf(ContentPath::class.java).contains(clazz)
        }
    }
    logger.info {
        "reflected: ${ReflectionToStringBuilder.toString(
            loadedWebsite.content,
            toStringStyle
        )}"
    }

    val targetPath = FileSystems.getDefault().getPath("public")
    Renderer(
        FinalyzerTheme(),
        targetPath
    ).render(loadedWebsite.content, loadedWebsite.metadata)
}
