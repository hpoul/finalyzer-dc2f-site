/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package app.anlage.site

import app.anlage.site.contentdef.*
import app.anlage.site.templates.*
import com.dc2f.*
import com.dc2f.render.*
import com.dc2f.util.toStringReflective
import kotlinx.html.*
import kotlinx.html.stream.appendHTML
import mu.KotlinLogging
import org.apache.commons.io.FileUtils
import org.apache.commons.text.StringEscapeUtils
import java.io.File
import java.nio.file.FileSystems

private val logger = KotlinLogging.logger {}

//interface PageSeo : ContentDef {
//    val title: String
//    val description: String
//}
//
//abstract class FinalyzerWebsite: Website<SimpleContentFolderChild> {
//    @set:JacksonInject("index")
//    abstract var index: LandingPage
//}

class FinalyzerTheme : Theme() {
    override fun configure(config: ThemeConfig) {
        config.pageRenderer<FinalyzerWebsite> {
            renderChildren(node.children)
            copyForNode(node.index).renderToHtml()
        }
        config.pageRenderer<LandingPage> { landingPage() }
        config.pageRenderer<Blog> { renderChildren(node.children); blogIndexPage() }
        config.pageRenderer<Article> { blogArticle() }
        config.pageRenderer<PartialFolder> {  }

        // TODO maybe create a custom variant to register embeddable figures?
        config.pageRenderer<FigureEmbeddable> {
            out.appendHTML().div {
                figure {
                    img {
                        src = node.image.href(context)
                        alt = node.alt ?: node.title ?: ""
//                        width = "200"//child.screenshot.width.toString()
//                        height = "200"//child.screenshot.height.toString()
                    }
                    node.title?.let { title ->
                        figcaption {
                            h4 { +title }
                        }
                    }
                }

            }
        }
        config.pageRenderer<Disqus> {
            val permalink = enclosingNode?.let { StringEscapeUtils.escapeJson(context.href(it)) } ?: ""
            // language=html
            out.append("""
<div id="disqus_thread"></div>
<script>
    var disqus_config = function () {
    this.page.url = "$permalink";  // Replace PAGE_URL with your page's canonical URL variable
    // this.page.identifier = '{{ . }}'; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };

    (function() { // DON'T EDIT BELOW THIS LINE
        setTimeout(function() {
            var d = document, s = d.createElement('script');
            s.async = true;
            s.src = 'https://${node.shortName}.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
        }, 2000);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
            """)
        }
        contentTemplates()
//        config.pageRenderer<FinalyzerWebsite>(
//            { ") }
//        )
    }

    override fun renderLinkTitle(content: ContentDef): String? =
        when (content) {
            is WithPageSeo -> content.seo.title
            else -> null
        }
}


fun main(args: Array<String>) {
    logger.info { "Starting ..." }

    val loadedWebsite = ContentLoader(FinalyzerWebsite::class)
        .load(FileSystems.getDefault().getPath("web", "content"))
    logger.info { "loaded website ${loadedWebsite}." }
    logger.info {
        "reflected: ${loadedWebsite.toStringReflective()}"
    }

    val targetPath = FileSystems.getDefault().getPath("public")
    Renderer(
        FinalyzerTheme(),
        targetPath,
        loadedWebsite.context
    ).renderWebsite(loadedWebsite.content, loadedWebsite.metadata)
    // FIXME workaround for now to copy over some assets only referenced by css (fonts)
    FileUtils.copyDirectory(File("web", "static"), targetPath.toFile())

}
